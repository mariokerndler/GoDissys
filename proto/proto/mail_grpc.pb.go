// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/mail.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Nameserver_RegisterMailbox_FullMethodName = "/mail.Nameserver/RegisterMailbox"
	Nameserver_LookupMailbox_FullMethodName   = "/mail.Nameserver/LookupMailbox"
)

// NameserverClient is the client API for Nameserver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Nameserver Service
type NameserverClient interface {
	// RegisterMailbox registers a user's full email address and their mailbox address.
	RegisterMailbox(ctx context.Context, in *RegisterMailboxRequest, opts ...grpc.CallOption) (*RegisterMailboxResponse, error)
	// LookupMailbox looks up the mailbox address for a given email address.
	LookupMailbox(ctx context.Context, in *LookupMailboxRequest, opts ...grpc.CallOption) (*LookupMailboxResponse, error)
}

type nameserverClient struct {
	cc grpc.ClientConnInterface
}

func NewNameserverClient(cc grpc.ClientConnInterface) NameserverClient {
	return &nameserverClient{cc}
}

func (c *nameserverClient) RegisterMailbox(ctx context.Context, in *RegisterMailboxRequest, opts ...grpc.CallOption) (*RegisterMailboxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterMailboxResponse)
	err := c.cc.Invoke(ctx, Nameserver_RegisterMailbox_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameserverClient) LookupMailbox(ctx context.Context, in *LookupMailboxRequest, opts ...grpc.CallOption) (*LookupMailboxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LookupMailboxResponse)
	err := c.cc.Invoke(ctx, Nameserver_LookupMailbox_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NameserverServer is the server API for Nameserver service.
// All implementations must embed UnimplementedNameserverServer
// for forward compatibility.
//
// Nameserver Service
type NameserverServer interface {
	// RegisterMailbox registers a user's full email address and their mailbox address.
	RegisterMailbox(context.Context, *RegisterMailboxRequest) (*RegisterMailboxResponse, error)
	// LookupMailbox looks up the mailbox address for a given email address.
	LookupMailbox(context.Context, *LookupMailboxRequest) (*LookupMailboxResponse, error)
	mustEmbedUnimplementedNameserverServer()
}

// UnimplementedNameserverServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNameserverServer struct{}

func (UnimplementedNameserverServer) RegisterMailbox(context.Context, *RegisterMailboxRequest) (*RegisterMailboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterMailbox not implemented")
}
func (UnimplementedNameserverServer) LookupMailbox(context.Context, *LookupMailboxRequest) (*LookupMailboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupMailbox not implemented")
}
func (UnimplementedNameserverServer) mustEmbedUnimplementedNameserverServer() {}
func (UnimplementedNameserverServer) testEmbeddedByValue()                    {}

// UnsafeNameserverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NameserverServer will
// result in compilation errors.
type UnsafeNameserverServer interface {
	mustEmbedUnimplementedNameserverServer()
}

func RegisterNameserverServer(s grpc.ServiceRegistrar, srv NameserverServer) {
	// If the following call pancis, it indicates UnimplementedNameserverServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Nameserver_ServiceDesc, srv)
}

func _Nameserver_RegisterMailbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterMailboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameserverServer).RegisterMailbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nameserver_RegisterMailbox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameserverServer).RegisterMailbox(ctx, req.(*RegisterMailboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nameserver_LookupMailbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupMailboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameserverServer).LookupMailbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nameserver_LookupMailbox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameserverServer).LookupMailbox(ctx, req.(*LookupMailboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Nameserver_ServiceDesc is the grpc.ServiceDesc for Nameserver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Nameserver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mail.Nameserver",
	HandlerType: (*NameserverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterMailbox",
			Handler:    _Nameserver_RegisterMailbox_Handler,
		},
		{
			MethodName: "LookupMailbox",
			Handler:    _Nameserver_LookupMailbox_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/mail.proto",
}

const (
	Mailbox_ReceiveMail_FullMethodName = "/mail.Mailbox/ReceiveMail"
	Mailbox_GetMail_FullMethodName     = "/mail.Mailbox/GetMail"
)

// MailboxClient is the client API for Mailbox service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Mailbox Service
type MailboxClient interface {
	// ReceiveMail receives a mail message.
	ReceiveMail(ctx context.Context, in *ReceiveMailRequest, opts ...grpc.CallOption) (*ReceiveMailResponse, error)
	// GetMail retrieves mail messages for a user.
	GetMail(ctx context.Context, in *GetMailRequest, opts ...grpc.CallOption) (*GetMailResponse, error)
}

type mailboxClient struct {
	cc grpc.ClientConnInterface
}

func NewMailboxClient(cc grpc.ClientConnInterface) MailboxClient {
	return &mailboxClient{cc}
}

func (c *mailboxClient) ReceiveMail(ctx context.Context, in *ReceiveMailRequest, opts ...grpc.CallOption) (*ReceiveMailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReceiveMailResponse)
	err := c.cc.Invoke(ctx, Mailbox_ReceiveMail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailboxClient) GetMail(ctx context.Context, in *GetMailRequest, opts ...grpc.CallOption) (*GetMailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMailResponse)
	err := c.cc.Invoke(ctx, Mailbox_GetMail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MailboxServer is the server API for Mailbox service.
// All implementations must embed UnimplementedMailboxServer
// for forward compatibility.
//
// Mailbox Service
type MailboxServer interface {
	// ReceiveMail receives a mail message.
	ReceiveMail(context.Context, *ReceiveMailRequest) (*ReceiveMailResponse, error)
	// GetMail retrieves mail messages for a user.
	GetMail(context.Context, *GetMailRequest) (*GetMailResponse, error)
	mustEmbedUnimplementedMailboxServer()
}

// UnimplementedMailboxServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMailboxServer struct{}

func (UnimplementedMailboxServer) ReceiveMail(context.Context, *ReceiveMailRequest) (*ReceiveMailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveMail not implemented")
}
func (UnimplementedMailboxServer) GetMail(context.Context, *GetMailRequest) (*GetMailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMail not implemented")
}
func (UnimplementedMailboxServer) mustEmbedUnimplementedMailboxServer() {}
func (UnimplementedMailboxServer) testEmbeddedByValue()                 {}

// UnsafeMailboxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MailboxServer will
// result in compilation errors.
type UnsafeMailboxServer interface {
	mustEmbedUnimplementedMailboxServer()
}

func RegisterMailboxServer(s grpc.ServiceRegistrar, srv MailboxServer) {
	// If the following call pancis, it indicates UnimplementedMailboxServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Mailbox_ServiceDesc, srv)
}

func _Mailbox_ReceiveMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailboxServer).ReceiveMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mailbox_ReceiveMail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailboxServer).ReceiveMail(ctx, req.(*ReceiveMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mailbox_GetMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailboxServer).GetMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mailbox_GetMail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailboxServer).GetMail(ctx, req.(*GetMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Mailbox_ServiceDesc is the grpc.ServiceDesc for Mailbox service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mailbox_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mail.Mailbox",
	HandlerType: (*MailboxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceiveMail",
			Handler:    _Mailbox_ReceiveMail_Handler,
		},
		{
			MethodName: "GetMail",
			Handler:    _Mailbox_GetMail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/mail.proto",
}

const (
	TransferServer_SendMail_FullMethodName = "/mail.TransferServer/SendMail"
)

// TransferServerClient is the client API for TransferServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// TransferServer Service
type TransferServerClient interface {
	// SendMail sends a mail message from a client.
	SendMail(ctx context.Context, in *SendMailRequest, opts ...grpc.CallOption) (*SendMailResponse, error)
}

type transferServerClient struct {
	cc grpc.ClientConnInterface
}

func NewTransferServerClient(cc grpc.ClientConnInterface) TransferServerClient {
	return &transferServerClient{cc}
}

func (c *transferServerClient) SendMail(ctx context.Context, in *SendMailRequest, opts ...grpc.CallOption) (*SendMailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMailResponse)
	err := c.cc.Invoke(ctx, TransferServer_SendMail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransferServerServer is the server API for TransferServer service.
// All implementations must embed UnimplementedTransferServerServer
// for forward compatibility.
//
// TransferServer Service
type TransferServerServer interface {
	// SendMail sends a mail message from a client.
	SendMail(context.Context, *SendMailRequest) (*SendMailResponse, error)
	mustEmbedUnimplementedTransferServerServer()
}

// UnimplementedTransferServerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransferServerServer struct{}

func (UnimplementedTransferServerServer) SendMail(context.Context, *SendMailRequest) (*SendMailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMail not implemented")
}
func (UnimplementedTransferServerServer) mustEmbedUnimplementedTransferServerServer() {}
func (UnimplementedTransferServerServer) testEmbeddedByValue()                        {}

// UnsafeTransferServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransferServerServer will
// result in compilation errors.
type UnsafeTransferServerServer interface {
	mustEmbedUnimplementedTransferServerServer()
}

func RegisterTransferServerServer(s grpc.ServiceRegistrar, srv TransferServerServer) {
	// If the following call pancis, it indicates UnimplementedTransferServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransferServer_ServiceDesc, srv)
}

func _TransferServer_SendMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServerServer).SendMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferServer_SendMail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServerServer).SendMail(ctx, req.(*SendMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransferServer_ServiceDesc is the grpc.ServiceDesc for TransferServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransferServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mail.TransferServer",
	HandlerType: (*TransferServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMail",
			Handler:    _TransferServer_SendMail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/mail.proto",
}
